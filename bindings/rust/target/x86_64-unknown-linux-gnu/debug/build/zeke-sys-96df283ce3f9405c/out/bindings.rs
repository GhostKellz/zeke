/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZekeHandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZekeConfigHandle {
    _unused: [u8; 0],
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ZekeErrorCode {
    ZEKE_SUCCESS = 0,
    ZEKE_INITIALIZATION_FAILED = -1,
    ZEKE_AUTHENTICATION_FAILED = -2,
    ZEKE_NETWORK_ERROR = -4,
    ZEKE_MEMORY_ERROR = -8,
    ZEKE_INVALID_PARAMETER = -9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct ZekeConfig {
    pub base_url: *const libc::c_char,
    pub api_key: *const libc::c_char,
    pub provider: i32,
    pub model_name: *const libc::c_char,
    pub temperature: f32,
    pub max_tokens: u32,
    pub stream: bool,
    pub enable_gpu: bool,
    pub enable_fallback: bool,
    pub timeout_ms: u32,
}
#[test]
fn bindgen_test_layout_ZekeConfig() {
    const UNINIT: ::core::mem::MaybeUninit<ZekeConfig> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ZekeConfig>(),
        48usize,
        concat!("Size of: ", stringify!(ZekeConfig))
    );
    assert_eq!(
        ::core::mem::align_of::<ZekeConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ZekeConfig))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base_url) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(base_url)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).api_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(api_key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).provider) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(provider)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).model_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(model_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_tokens) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(max_tokens)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enable_gpu) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(enable_gpu)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enable_fallback) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(enable_fallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout_ms) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeConfig),
            "::",
            stringify!(timeout_ms)
        )
    );
}
impl Default for ZekeConfig {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ZekeResponse {
    pub content: *const libc::c_char,
    pub provider_used: i32,
    pub tokens_used: u32,
    pub response_time_ms: u32,
    pub error_code: ZekeErrorCode,
    pub error_message: *const libc::c_char,
}
#[test]
fn bindgen_test_layout_ZekeResponse() {
    const UNINIT: ::core::mem::MaybeUninit<ZekeResponse> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ZekeResponse>(),
        32usize,
        concat!("Size of: ", stringify!(ZekeResponse))
    );
    assert_eq!(
        ::core::mem::align_of::<ZekeResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(ZekeResponse))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).provider_used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(provider_used)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tokens_used) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(tokens_used)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).response_time_ms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(response_time_ms)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZekeResponse),
            "::",
            stringify!(error_message)
        )
    );
}
impl Default for ZekeResponse {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn zeke_init(config: *const ZekeConfig) -> *mut ZekeHandle;
}
extern "C" {
    pub fn zeke_chat(
        handle: *mut ZekeHandle,
        message: *const libc::c_char,
        response_out: *mut ZekeResponse,
    ) -> ZekeErrorCode;
}
extern "C" {
    pub fn zeke_test_auth(handle: *mut ZekeHandle, provider: i32) -> ZekeErrorCode;
}
extern "C" {
    pub fn zeke_free_response(response: *mut ZekeResponse);
}
extern "C" {
    pub fn zeke_destroy(handle: *mut ZekeHandle);
}
extern "C" {
    pub fn zeke_version() -> *const libc::c_char;
}
extern "C" {
    pub fn zeke_health_check(handle: *mut ZekeHandle) -> ZekeErrorCode;
}
extern "C" {
    pub fn zeke_get_last_error() -> *const libc::c_char;
}
